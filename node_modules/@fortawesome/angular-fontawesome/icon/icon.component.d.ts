import { OnChanges, SimpleChanges } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { FaSymbol, FlipProp, IconDefinition, IconProp, PullProp, RotateProp, SizeProp, Styles, Transform } from '@fortawesome/fontawesome-svg-core';
import { FaConfig } from '../config';
import { FaIconLibrary } from '../icon-library';
import { FaStackItemSizeDirective } from '../stack/stack-item-size.directive';
import * as ɵngcc0 from '@angular/core';
export declare class FaIconComponent implements OnChanges {
    private sanitizer;
    private config;
    private iconLibrary;
    private stackItem;
    icon: IconProp;
    /**
     * Specify a title for the icon.
     * This text will be displayed in a tooltip on hover and presented to the
     * screen readers.
     */
    title?: string;
    spin?: boolean;
    pulse?: boolean;
    mask?: IconProp;
    styles?: Styles;
    flip?: FlipProp;
    size?: SizeProp;
    pull?: PullProp;
    border?: boolean;
    inverse?: boolean;
    symbol?: FaSymbol;
    rotate?: RotateProp;
    fixedWidth?: boolean;
    classes?: string[];
    transform?: string | Transform;
    /**
     * Specify the `role` attribute for the rendered <svg> element.
     *
     * @default 'img'
     */
    a11yRole: string;
    renderedIconHTML: SafeHtml;
    constructor(sanitizer: DomSanitizer, config: FaConfig, iconLibrary: FaIconLibrary, stackItem: FaStackItemSizeDirective);
    ngOnChanges(changes: SimpleChanges): never;
    /**
     * Programmatically trigger rendering of the icon.
     *
     * This method is useful, when creating {@link FaIconComponent} dynamically or
     * changing its inputs programmatically as in these cases icon won't be
     * re-rendered automatically.
     */
    render(): void;
    protected findIconDefinition(i: IconProp | IconDefinition): IconDefinition | null;
    protected buildParams(): {
        title: string;
        transform: Transform;
        classes: string[];
        mask: IconDefinition;
        styles: Styles;
        symbol: string | boolean;
        attributes: {
            role: string;
        };
    };
    private renderIcon;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FaIconComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FaIconComponent, "fa-icon", never, {
    "classes": "classes";
    "icon": "icon";
    "title": "title";
    "spin": "spin";
    "pulse": "pulse";
    "mask": "mask";
    "styles": "styles";
    "flip": "flip";
    "size": "size";
    "pull": "pull";
    "border": "border";
    "inverse": "inverse";
    "symbol": "symbol";
    "rotate": "rotate";
    "fixedWidth": "fixedWidth";
    "transform": "transform";
    "a11yRole": "a11yRole";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiaWNvbi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQU1BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0RBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVIdG1sIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBGYVN5bWJvbCwgRmxpcFByb3AsIEljb25EZWZpbml0aW9uLCBJY29uUHJvcCwgUHVsbFByb3AsIFJvdGF0ZVByb3AsIFNpemVQcm9wLCBTdHlsZXMsIFRyYW5zZm9ybSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1zdmctY29yZSc7XG5pbXBvcnQgeyBGYUNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBGYUljb25MaWJyYXJ5IH0gZnJvbSAnLi4vaWNvbi1saWJyYXJ5JztcbmltcG9ydCB7IEZhU3RhY2tJdGVtU2l6ZURpcmVjdGl2ZSB9IGZyb20gJy4uL3N0YWNrL3N0YWNrLWl0ZW0tc2l6ZS5kaXJlY3RpdmUnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmFJY29uQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIHNhbml0aXplcjtcbiAgICBwcml2YXRlIGNvbmZpZztcbiAgICBwcml2YXRlIGljb25MaWJyYXJ5O1xuICAgIHByaXZhdGUgc3RhY2tJdGVtO1xuICAgIGljb246IEljb25Qcm9wO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgYSB0aXRsZSBmb3IgdGhlIGljb24uXG4gICAgICogVGhpcyB0ZXh0IHdpbGwgYmUgZGlzcGxheWVkIGluIGEgdG9vbHRpcCBvbiBob3ZlciBhbmQgcHJlc2VudGVkIHRvIHRoZVxuICAgICAqIHNjcmVlbiByZWFkZXJzLlxuICAgICAqL1xuICAgIHRpdGxlPzogc3RyaW5nO1xuICAgIHNwaW4/OiBib29sZWFuO1xuICAgIHB1bHNlPzogYm9vbGVhbjtcbiAgICBtYXNrPzogSWNvblByb3A7XG4gICAgc3R5bGVzPzogU3R5bGVzO1xuICAgIGZsaXA/OiBGbGlwUHJvcDtcbiAgICBzaXplPzogU2l6ZVByb3A7XG4gICAgcHVsbD86IFB1bGxQcm9wO1xuICAgIGJvcmRlcj86IGJvb2xlYW47XG4gICAgaW52ZXJzZT86IGJvb2xlYW47XG4gICAgc3ltYm9sPzogRmFTeW1ib2w7XG4gICAgcm90YXRlPzogUm90YXRlUHJvcDtcbiAgICBmaXhlZFdpZHRoPzogYm9vbGVhbjtcbiAgICBjbGFzc2VzPzogc3RyaW5nW107XG4gICAgdHJhbnNmb3JtPzogc3RyaW5nIHwgVHJhbnNmb3JtO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgdGhlIGByb2xlYCBhdHRyaWJ1dGUgZm9yIHRoZSByZW5kZXJlZCA8c3ZnPiBlbGVtZW50LlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgJ2ltZydcbiAgICAgKi9cbiAgICBhMTF5Um9sZTogc3RyaW5nO1xuICAgIHJlbmRlcmVkSWNvbkhUTUw6IFNhZmVIdG1sO1xuICAgIGNvbnN0cnVjdG9yKHNhbml0aXplcjogRG9tU2FuaXRpemVyLCBjb25maWc6IEZhQ29uZmlnLCBpY29uTGlicmFyeTogRmFJY29uTGlicmFyeSwgc3RhY2tJdGVtOiBGYVN0YWNrSXRlbVNpemVEaXJlY3RpdmUpO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiBuZXZlcjtcbiAgICAvKipcbiAgICAgKiBQcm9ncmFtbWF0aWNhbGx5IHRyaWdnZXIgcmVuZGVyaW5nIG9mIHRoZSBpY29uLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdXNlZnVsLCB3aGVuIGNyZWF0aW5nIHtAbGluayBGYUljb25Db21wb25lbnR9IGR5bmFtaWNhbGx5IG9yXG4gICAgICogY2hhbmdpbmcgaXRzIGlucHV0cyBwcm9ncmFtbWF0aWNhbGx5IGFzIGluIHRoZXNlIGNhc2VzIGljb24gd29uJ3QgYmVcbiAgICAgKiByZS1yZW5kZXJlZCBhdXRvbWF0aWNhbGx5LlxuICAgICAqL1xuICAgIHJlbmRlcigpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBmaW5kSWNvbkRlZmluaXRpb24oaTogSWNvblByb3AgfCBJY29uRGVmaW5pdGlvbik6IEljb25EZWZpbml0aW9uIHwgbnVsbDtcbiAgICBwcm90ZWN0ZWQgYnVpbGRQYXJhbXMoKToge1xuICAgICAgICB0aXRsZTogc3RyaW5nO1xuICAgICAgICB0cmFuc2Zvcm06IFRyYW5zZm9ybTtcbiAgICAgICAgY2xhc3Nlczogc3RyaW5nW107XG4gICAgICAgIG1hc2s6IEljb25EZWZpbml0aW9uO1xuICAgICAgICBzdHlsZXM6IFN0eWxlcztcbiAgICAgICAgc3ltYm9sOiBzdHJpbmcgfCBib29sZWFuO1xuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICByb2xlOiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBwcml2YXRlIHJlbmRlckljb247XG59XG4iXX0=